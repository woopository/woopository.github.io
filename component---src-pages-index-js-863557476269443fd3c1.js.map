{"version":3,"file":"component---src-pages-index-js-863557476269443fd3c1.js","mappings":"uJAyBA,IAtBe,SAAH,GAA6B,IAAvBA,EAAK,EAALA,MAAOC,EAAQ,EAARA,SACvB,OACE,uBAAKC,UAAU,kBACb,0BAAQA,UAAU,iBAChB,uBAAKA,UAAU,2BACb,sBAAIA,UAAU,eACZ,gBAAC,EAAAC,KAAI,CAACC,GAAG,KAAKJ,IAEhB,sBAAIE,UAAU,yBACZ,0BAAI,gBAAC,EAAAC,KAAI,CAACC,GAAG,KAAG,SAChB,0BAAI,gBAAC,EAAAD,KAAI,CAACC,GAAG,KAAG,cAItB,wBAAMF,UAAU,oBAAoBD,GACpC,8BACE,qBAAGC,UAAU,aAAW,MAAI,IAAIG,MAAOC,cAAa,iBAI5D,C,+CCZMC,EAAM,SAAH,GAAgD,IAAD,MAAzCC,EAAW,EAAXA,YAAmBR,GAAF,EAAJS,KAAW,EAALT,OAAOC,EAAQ,EAARA,SAC/BS,GAASC,EAAAA,EAAAA,gBAAe,cAAxBD,KAgBFE,EAAkBJ,GAAeE,EAAKG,aAAaL,YACnDM,EAAgC,QAApB,EAAGJ,EAAKG,oBAAY,aAAjB,EAAmBb,MAExC,OACE,gCACE,6BAAQc,EAAkBd,EAAK,MAAMc,EAAiBd,GACtD,wBAAMe,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAAShB,IACnC,wBAAMiB,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,kBACLC,SAA0B,QAAjB,EAAAN,EAAKG,oBAAY,OAAQ,QAAR,EAAjB,EAAmBK,cAAM,WAAR,EAAjB,EAA2BC,UAAO,KAE7C,wBAAMJ,KAAK,gBAAgBC,QAAShB,IACpC,wBAAMe,KAAK,sBAAsBC,QAASJ,IACzCX,EAGP,EAEAM,EAAIa,aAAe,CACjBZ,YAAY,IAQd,K,6GCHA,UAlDkB,SAAH,GAA4B,IAAD,EAArBa,EAAI,EAAJA,KAAMC,EAAQ,EAARA,SACnBC,GAAkC,QAAtB,EAAAF,EAAKX,KAAKG,oBAAY,aAAtB,EAAwBb,QAAK,QACzCwB,EAAQH,EAAKI,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,gBAAC,IAAM,CAACL,SAAUA,EAAUtB,MAAOuB,GACjC,kDAMJ,gBAAC,IAAM,CAACD,SAAUA,EAAUtB,MAAOuB,GACjC,sBAAIK,MAAO,CAAEC,UAAU,SACpBL,EAAMM,KAAI,SAAAC,GACT,IAAM/B,EAAQ+B,EAAKC,YAAYhC,OAAS+B,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BACEhC,UAAU,iBACVkC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAlC,KAAI,CAACC,GAAI2B,EAAKE,OAAOC,KAAMI,SAAS,OACnC,wBAAMA,SAAS,YAAYtC,KAG/B,6BAAQ+B,EAAKC,YAAYO,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQV,EAAKC,YAAYxB,aAAeuB,EAAKW,SAE/CJ,SAAS,kBAMrB,KAIR,EAIO,IAAMK,EAAO,WAAH,OAAS,gBAAC,IAAG,CAAC3C,MAAM,QAAS,C","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ title, children }) => {\n  return (\n    <div className=\"global-wrapper\">\n      <header className=\"global-header\">\n        <div className=\"global-header-container\">\n          <h1 className=\"global-logo\">\n            <Link to=\"/\">{title}</Link>\n          </h1>\n          <ul className=\"global-menu-link-list\">\n            <li><Link to=\"/\">Blog</Link></li>\n            <li><Link to=\"/\">Github</Link></li>\n          </ul>\n        </div>\n      </header>\n      <main className=\"global-container\">{children}</main>\n      <footer>\n        <p className=\"copyright\">Â© {new Date().getFullYear()} woopository</p>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nSeo.defaultProps = {\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <p>No blog posts found.</p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>            \n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const Head = () => <Seo title=\"Home\" />\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["title","children","className","Link","to","Date","getFullYear","Seo","description","lang","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","defaultProps","data","location","siteTitle","posts","allMarkdownRemark","nodes","length","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","excerpt","Head"],"sourceRoot":""}